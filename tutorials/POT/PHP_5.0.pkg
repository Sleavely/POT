<refentry id="{@id}">
    <refnamediv>
        <refname>PHP 5.0</refname>
        <refpurpose>Some things that you should know if you use POT under PHP 5.0.x.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>{@link mailto:wrzasq@gmail.com Wrzasq}</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id intro}">
        <title>PHP 5.0</title>
        <para>
        PHP5 was a huge step in PHP histroy. It is completly other language then PHP4 (and older versions). POT is written for PHP5 but currently most PHP5 installations are done with PHP 5.1 and higher versions. PHP 5.0 differs from next versions in few details (or even not details, but huge changes, but those mostly doesn't affect POT). There are some important things you should know if you use POT with PHP 5.0.
        </para>
        <refsect2 id="{@id pdo}">
            <title>PDO</title>
            <para>
            POT requires {@link http://www.php.net/manual/en/ref.pdo.php PDO extension}. It is bundled with PHP since 5.1 version. If you use PHP 5.0 you still can install PDO, but you need to do that using {@link http://pecl.php.net/ PECL extensions}. Detailed information about how to do that are in {@link http://www.php.net/manual/en/ref.pdo.php#pdo.installation PHP manual PDO page}.
            </para>
        </refsect2>
        <refsect2 id="{@id compat}">
            <title>Sub package "compat"</title>
            <para>
            If you use PHP 5.0 you should include special {@link compat.php compatibility assurance library}. POT uses some mechanisms that exists since PHP 5.1 like {@link http://www.php.net/~helly/php/ext/spl/interfaceCountable.html Countable interface}. It doesn't disallow you using POT with PHP 5.0. Compatibility library will create unexisting interfaces, classes, functions, constants etc. However keep in mind that you won't be able to use PHP 5.1 and newer language mechanisms as it is not possible to redefine PHP behaviour. Here is an example: {@example examples/php50.php}
            </para>
            <para>
            It is important to note that you have to load compat.php library before loading POT toolkit itself. This library by itself is not connected with POT in any way and you can freely separate it.
            </para>
            <refsect3 id="{@id nothing}">
                <title>Nothin new</title>
                <para>
                Compatibility library makes you sure, that POT scripts won't cause FATAL errors if you run them on older versions of PHP. However it doesn't introduce any new mechanisms so you won't find anything new in this package. It is safe to include compat.php file even if you work with PHP version 5.1 or newer, but there is no point in doing that.
                </para>
            </refsect3>
            <refsect3 id="{@id __autoload}">
                <title>__autoload()</title>
                <para>
                POT registers own {@link http://www.php.net/manual/en/language.oop5.autoload.php __autoload()} handler with {@link http://www.php.net/manual/en/function.spl-autoload-register.php spl_autoload_register()}. This function exists since PHP 5.1.2. Compatibility library defines this function as definer of another function - ordinary __autoload(). If you have own __autoload() function, compat's spl_autoload_register() won't redefine __autoload() to avoid E_ERROR. You then need to bind {@link POT::loadClass() POT::loadClass() method} to your __autoload() function manualy.
                </para>
            </refsect3>
        </refsect2>
    </refsect1>
    <refsect1 id="{@id older}">
        <title>What about older PHP versions?</title>
        <para>
        No way. POT was written using new PHP5 object engine - you cant use it with PHP4 and older versions of PHP, PHP/FI.
        </para>
    </refsect1>
</refentry>
