<refentry id="{@id}">
    <refnamediv>
        <refname>Quick start</refname>
        <refpurpose>Quick start guide.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>{@link mailto:wrzasq@gmail.com Wrzasq}</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id startup}">
        <title>Putting this all together</title>
        <para>
        To set POT up for using you have to create it's instance and connect to database (we also encourage you to bind {@link POT::loadClass() POT classes loading mechanism} to __autoload() function. Here is a startup code example: {@example examples/quickstart.php}
        </para>
    </refsect1>
    <refsect1 id="{@id account}">
        <title>Account creation</title>
        <para>
        It is very simple to create account with POT. Here is example code that is self-explainable: {@example examples/account.php}
        </para>
        <para>
        It is important to remember that {@link OTS_Account::create() create() method} sets `blocked` field of record to true by default, so for smaller projects where you, for example, wouldn't need e-mail activation unblock it after creation.
        </para>
    </refsect1>
    <refsect1 id="{@id player}">
        <title>Character reading</title>
        <para>
        Here comes also simple example for character search: {@example examples/player.php}
        </para>
    </refsect1>
    <refsect1 id="{@id lists}">
        <title>Objects listings</title>
        <para>
        There are also classes for entire sets of records. For each of row classes there is list class. Throught list object you can read single objects and/or delete them from database. Also you can set limitation (for example for pagination). All list classes implements Countable and Iterator interfaces: {@example examples/list.php}
        </para>
    </refsect1>
</refentry>
