<refentry id="{@id}">
    <refnamediv>
        <refname>Basics</refname>
        <refpurpose>Most important things you have to know in order to use POT.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>{@link mailto:wrzasq@gmail.com Wrzasq}</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id basics}">
        <title>POT basics</title>
        <para>
        Most important is to understand how it all works. POT provides classes to abstract many OTServ resources. Main class of toolkit is named {@link POT POT}. Many resource handlers are assigned to it's fields and available throught it's calls.
        </para>
        <refsect2 id="{@id static}">
            <title>Static POT class</title>
            <para>
            POT class is just a set of static method and fields. It means you call each of them staticly, by accessing class members, without need to create class instance.
            </para>
            <para>
            What is it for? POT class defines entire enviroment for working with OTServ. It wraps all infromation using by other classes, defines entire environment for working with database, data resources and so on. And now imagine you would want to move that enviroment into another scope, for example into function. Since {@link POT POT class} is static, there is no problem with that.
            </para>
        </refsect2>
        <refsect2 id="{@id database}">
            <title>Database connection</title>
            <para>
            Probably the most important part of this toolkit is database operations part. To execute any operations on database you first have to connect. POT supports 4 SQL drivers: {@link OTS_DB_MySQL MySQL}, {@link OTS_DB_SQLite SQLite}, {@link OTS_DB_PostgreSQL PgSQL} and {@link OTS_DB_ODBC ODBC}. Each of those drivers has different connection parameters list so look into theirs documentation for details. To connect with database you use {@link POT::connect() connect() method}. {@example examples/quickstart.php}
            </para>
            <para>
            To execute particular operations you will use objects and it's usage will be described in {@tutorial POT/DAO_objects.pkg further parts} of this tutorial.
            </para>
            <refsect3 id="{@id pdo}">
                <title>PDO</title>
                <para>
                As a core for database handle {@link http://www.php.net/manual/en/ref.pdo.php PDO} instance is used. You can get pure connection handle which will enable you to execute SQL queries directly by calling {@link POT::getDBHandle() getDBHandle() method} after connecting to database.
                </para>
            </refsect3>
        </refsect2>
        <refsect2 id="{@id fakeroot}">
            <title>Changing directory</title>
            <para>
            As you probably noticed the only one file which you include is {@link OTS.php OTS.php}. But you have to keep all POT files in one directory. If you wan't to have main file somewhere in your autoloaded directories and keep your directories tree clean from all additional POT files, you can use {@link POT::setPOTPath() setPOTPath() method}: {@example examples/fakeroot.php}
            </para>
        </refsect2>
    </refsect1>
    <refsect1 id="{@id quick_start}">
        <title>Quick start</title>
        <para>
        So to put that all together, in order to start working with POT you have to:
        </para>
        <orderedlist>
            <listitem>Load main toolkit file (OTS.php).</listitem>
            <listitem>Connect to database.</listitem>
        </orderedlist>
        <para>
        When you will use POT also for working with non-database resources then you will also mostly have to load global instances for some of them.
        </para>
    </refsect1>
</refentry>
