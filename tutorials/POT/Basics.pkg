<refentry id="{@id}">
    <refnamediv>
        <refname>Basics</refname>
        <refpurpose>Most important things you have to know in order to use POT.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>{@link mailto:wrzasq@gmail.com Wrzasq}</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id basics}">
        <title>POT basics</title>
        <para>
        Most important is to understand how it all works. POT provides classes to abstract many OTServ resources. Main class of toolkit is named {@link POT POT}. Many resource handlers are assigned to POT instance.
        </para>
        <refsect2 id="{@id singleton}">
            <title>POT class instance</title>
            <para>
            POT class implements {@link http://www.phppatterns.com/docs/design/singleton_pattern singleton pattern}. It means you should use only one instance of this class everywhere. Thanks to PHP5 and methods access definers, it's constructor was restricted to private so you won't even be able to create more instances. This might seem quite odd for you - you won't create object directly. To get POT class instance you have to use {@link POT::getInstance() getInstance() method}. In next section you will see example how to call this method.
            </para>
            <para>
            What is it for? POT class defines entire enviroment for working with OTServ. In single instance you define all resources needed to work with given server. And now imagine you would want to move that enviroment into another scope, for example into function. Since singleton is a static instance, there is no problem with that. You just fetch the very same enviroment every time you call {@link POT::getInstance() POT::getInstance()}.
            </para>
        </refsect2>
        <refsect2 id="{@id database}">
            <title>Database connection</title>
            <para>
            Probably the most important part of this toolkit is database operations part. To execute any operations on database you first have to connect. POT supports 4 SQL drivers: {@link OTS_DB_MySQL MySQL}, {@link OTS_DB_SQLite SQLite}, {@link OTS_DB_PostgreSQL PgSQL} and {@link OTS_DB_ODBC ODBC}. Each of those drivers has different connection parameters list so look into theirs documentation for details. To connect with database you use {@link POT::connect() connect() method}. {@example examples/quickstart.php}
            </para>
            <para>
            To execute particular operations you will use objects and it's usage will be described in {@tutorial POT/DAO_objects.pkg further parts} of this tutorial.
            </para>
            <refsect3 id="{@id pdo}">
                <title>PDO</title>
                <para>
                As a core for database handle {@link http://www.php.net/manual/en/ref.pdo.php PDO} instance is used. You can get pure connection handle which will enable you to execute SQL queries directly by calling {@link POT::getDBHandle() getDBHandle() method} on connected POT instance.
                </para>
            </refsect3>
        </refsect2>
        <refsect2 id="{@id fakeroot}">
            <title>Changing directory</title>
            <para>
            As you probably noticed the only one file which you include is {@link OTS.php OTS.php}. But you have to keep all POT files in one directory. If you wan't to have main file somewhere in your autoloaded directories and keep your directories tree clean from all additional POT files, you can use {@link POT::setPOTPath() setPOTPath() method}: {@example examples/fakeroot.php}
            </para>
        </refsect2>
    </refsect1>
    <refsect1 id="{@id quick_start}">
        <title>Quick start</title>
        <para>
        So to put that all together, in order to start working with POT you have to:
        </para>
        <orderedlist>
            <listitem>Load main toolkit file (OTS.php).</listitem>
            <listitem>Create POT instance by calling {@link POT::getInstance() POT::getInstance()} first time.</listitem>
            <listitem>Connect to database.</listitem>
        </orderedlist>
        <para>
        When you will use POT also for working with non-database resources then you will also mostly have to load global instances for some of them.
        </para>
    </refsect1>
</refentry>
