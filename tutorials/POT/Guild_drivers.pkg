<refentry id="{@id}">
    <refnamediv>
        <refname>Guild action drivers</refname>
        <refpurpose>Handling invites/requests system for guilds.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>{@link mailto:wrzasq@gmail.com Wrzasq}</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id how}">
        <title>How does it work?</title>
        <para>
        OTServ database contains all guilds contents. But it is very common in AAC world to create invites system (or also requests system, but invitations are more common). It is not provided by standard OTServ database, thought nearly all AAC scripts contains such mechanisms. POT classes allows you to set own drivers for invitations and requests to extend basic OTS functionality.
        </para>
        <para>
        You have to write a driver class and assign it's object to guild object - then guild object will call requested actions on driver which will execute action code dependent on your script.
        </para>
    </refsect1>
    <refsect1 id="{@id driver}">
        <title>Driver structure</title>
        <para>
        Both invites and requests drivers are similar - they must implement {@link IOTS_GuildAction IOTS_GuildAction interface}. When the driver is assigned to guild object, each time a method of {@list OTS_Guild OTS_Guild} object is called, it will forward this to action driver.
        </para>
    </refsect1>
    <refsect1 id="{@id sample}">
        <title>Sample driver</title>
        <para>
        Driver implements your logic for invites (or membership requests). Here is sample code that you can base on: {@example examples/driver.php}
        </para>
    </refsect1>
</refentry>
