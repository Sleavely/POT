<refentry id="{@id}">
    <refnamediv>
        <refname>OTAdmin client</refname>
        <refpurpose>POT contains simple implementation of OTAdmin protocol.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>{@link mailto:wrzasq@gmail.com Wrzasq}</author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id protocol}">
        <title>OTAdmin protocol</title>
        <para>
        OTAdmin protocol is a protocol that makes it possible to communicate directly with OTServ even remotely (however it has to be enabled) and to execute some commands. This protocol works directly within OTServ like all other protocols - login protocol, game protocol, info protocol etc. so it means it works on same port that all other OTServ services. It is binary protocol which is done using standard NetworkMessages (class that most OTServ-related projects in C++ use).
        </para>
        <refsect2 id="{@id encryption}">
            <title>Encryption</title>
            <para>
            For safety resons OTAdmin protocol can be encrypted. Encryption is not defined by protocol, only encryption interface is added into coded part so it means you can potentialy implement any encryption. However at the moment only one which is used is XTEA encryption with RSA-encrypted keys negotiation - it means that at first XTEA keys are transfered using RSA encryption and rest of connection is encrypted with XTEA using received keys. RSA key for negotation is stored on server, while XTEA key is always (usualy randomly) generated by client.
            </para>
            <para>
            Encryption is automaticly detected and set by POT so in PHP you don't need to worry about anything connected with encryption. It's done internaly and mentioned only to give you a know.
            </para>
        </refsect2>
        <refsect2 id="{@id login}">
            <title>Loggin in</title>
            <para>
            Another safety enchantment is possiblity to enable password login required. As it requires you to put password, it can't be handled automaticly by POT - after connection you should check if {@link OTS_Admin::requiresLogin() password is required} (after establishing connection all protocol flags are set).
            </para>
        </refsect2>
    </refsect1>
    <refsect1 id="{@id client}">
        <title>Client API</title>
        <para>
        POT implementation of OTAdmin protocol is complete (for current state of protocol development - it's still under development and at the moment provides only few commands):
        </para>
        <itemizedlist>
            <listitem>{@link OTS_Admin::login() login()} - logs in with password.</listitem>
            <listitem>{@link OTS_Admin::ping() ping()} - checks if server is running.</listitem>
            <listitem>{@link OTS_Admin::broadcast() broadcast()} - sends broadcast message to all players.</listitem>
            <listitem>{@link OTS_Admin::close() close()} - closes server (this command only closes server for game disabling new players to log in, server itself will still be running).</listitem>
            <listitem>{@link OTS_Admin::payHouses() payHouses()} - takes rent fees for all rented houses.</listitem>
            <listitem>{@link OTS_Admin::shutdown() shutdown()} - this command closes server physicly be shuting down it's process.</listitem>
            <listitem>{@link OTS_Admin::kick() kick()} - kicks given player from server.</listitem>
        </itemizedlist>
        <para>
        Here is very simple example client session: {@example examples/admin.php}
        </para>
        <para>
        Curiosity: POT was the very first complete (for current protocol version) implementation of client API - it's version with the newest {@link OTS_Admin::COMMAND_PAY_HOUSES PAY_HOUSES command} was released the day before oryginal OTAdmin tool!
        </para>
    </refsect1>
    <refsect1 id="{@id save}">
        <title>Server save</title>
        <para>
        Since {@link OTS_Admin::save() saving} and {@link OTS_Admin::open() opening} server is implemented in OTAdmin protocol and POT client for it, it is possible to evaluate full server-save cycle in a very simple way: {@example examples/save.php}
        </para>
    </refsect1>
</refentry>
